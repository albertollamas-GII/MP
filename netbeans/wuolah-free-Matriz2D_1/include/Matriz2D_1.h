#ifndef MATRIZ2D_1_CONSTRUCTORCOPIA
#define MATRIZ2D_1_CONSTRUCTORCOPIA

/*************************************************************************/

typedef int TipoBase;

/*************************************************************************/

class Matriz2D_1 {

private:

	TipoBase ** datos;
	int fils;
	int cols;

public:

/*************************************************************************/
/*************************************************************************/
// Constructor sin argumentos, crea una matriz vacía

	Matriz2D_1 (void);

/*************************************************************************/
/*************************************************************************/
// Constructor con un argumento, matriz n*n

	Matriz2D_1 (int lado);

/*************************************************************************/
/*************************************************************************/
// Constructor con dos argumentos (f,c) crea matriz f*c

	Matriz2D_1 (int filas, int columnas);

/*************************************************************************/
/*************************************************************************/
// Constructor con tres argumentos (f,c,n) crea matriz f*c con el valor n en
// todas las casillas

	Matriz2D_1 (int filas, int columnas, TipoBase valor);

/*************************************************************************/
/*************************************************************************/
// Constructor que recibe el nombre de un fichero de texto y rellena las 
// casillas de la matriz con los datos contenidos en el fichero

	Matriz2D_1 (const char * nombre);

/*************************************************************************/
/*************************************************************************/
// Constructor de copia

	Matriz2D_1 (const Matriz2D_1 & otro);

/*************************************************************************/
/*************************************************************************/
// Destructor

	~Matriz2D_1 (void);

/*************************************************************************/
/*************************************************************************/
// Guarda en el fichero de texto pasado como argumento el contenido de la 
// matriz

	void EscribirMatriz2D_1 (const char * nombre) const;

/*************************************************************************/
/*************************************************************************/
// Sustituye el contenido de la matriz por los valores que están en el fichero 
// de texto

	void LeerMatriz2D_1 (const char * nombre);

/*************************************************************************/
/*************************************************************************/
// Metodo que devuelve el numero de filas de la matriz

	int GetFilas (void);

/*************************************************************************/
/*************************************************************************/
// Metodo que devuelve el numero de columnas de la matriz

	int GetColumnas (void);

/*************************************************************************/
/*************************************************************************/
// Metodo que inicializa una matriz a un numero indicado

	void Inicializar(int valor);

/*************************************************************************/
/*************************************************************************/
// Metodo que devuelve el valor de una posicion de la matriz

	TipoBase LeerValor (int fila, int columna);

/*************************************************************************/
/*************************************************************************/
// Metodo que permite modificar el valor de una posicion

	void ModificarValor (int fila, int columna, TipoBase valor);

/*************************************************************************/
/*************************************************************************/
// Metodo que devuelve si una matriz esta vacia o no (true/false)

	bool EsMatrizVacia (void);

/*************************************************************************/
/*************************************************************************/
/*************************************************************************/
/*************************************************************************/

// SOBRECARGAS

/*************************************************************************/
/*************************************************************************/
// Sobrecarga del operador de asignacion

	Matriz2D_1 & operator = (const Matriz2D_1 & otro);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga alternativa del operador de asignacion
// Recibe un dato de tipo TipoBase e inicializa toda la matriz a ese valor

	Matriz2D_1 & operator = (const TipoBase & valor);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga del operador () como rvalue

	TipoBase & operator () (const int fila, const int columna) const;

/*************************************************************************/
/*************************************************************************/
// Sobrecarga del operador () como lvalue

	TipoBase & operator () (const int fila, const int columna);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga de operadores unarios + y -

	Matriz2D_1 operator + (void);

	Matriz2D_1 operator - (void);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga de operadores binarios + y -

	friend Matriz2D_1 operator + (const Matriz2D_1 & m1,
						   		  const Matriz2D_1 & m2);

//////////////////////////////////////////////////////////////////////////

	friend Matriz2D_1 operator - (const Matriz2D_1 & m1,
								  const Matriz2D_1 & m2);

//////////////////////////////////////////////////////////////////////////

	friend Matriz2D_1 operator + (const Matriz2D_1 & m1,
								  const TipoBase & valor);

//////////////////////////////////////////////////////////////////////////

	friend Matriz2D_1 operator - (const Matriz2D_1 & m1, 
								  const TipoBase & valor);

//////////////////////////////////////////////////////////////////////////
	
	friend Matriz2D_1 operator + (const TipoBase & valor,
								  const Matriz2D_1 & m1);

//////////////////////////////////////////////////////////////////////////
	
	friend Matriz2D_1 operator - (const TipoBase & valor,
								  const Matriz2D_1 & m1);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga de los operadores combinados += y -=

	Matriz2D_1 & operator += (const TipoBase & valor);

//////////////////////////////////////////////////////////////////////////

	Matriz2D_1 & operator -= (const TipoBase & valor);

/*************************************************************************/
/*************************************************************************/
// Sobrecarga de los operadores combinados == y !=

	friend bool operator == (const Matriz2D_1 & m1, const Matriz2D_1 & m2);

//////////////////////////////////////////////////////////////////////////

	friend bool operator != (const Matriz2D_1 & m1, const Matriz2D_1 & m2);

/*************************************************************************/
/*************************************************************************/

// METODOS PRIVADOS

/*************************************************************************/
/*************************************************************************/

private: 

/*************************************************************************/
/*************************************************************************/
// Metodo que reserva memoria para una matriz

	void ReservarMemoria (int filas, int columnas);

/*************************************************************************/
/*************************************************************************/
// Metodo que copia datos de una matriz a otra
	
	void CopiarDatos (const Matriz2D_1 & otro);

/*************************************************************************/
/*************************************************************************/
// Metodo que libera la memoria de una matriz

	void LiberarMemoria (void);

};

/*************************************************************************/
/*************************************************************************/
/*************************************************************************/
/*************************************************************************/
/*************************************************************************/
/*************************************************************************/

// FUNCIONES EXTERNAS A LA CLASE

/*************************************************************************/
/*************************************************************************/
// Funcion que pinta una matriz

void PintaMatriz (Matriz2D_1 matriz); 

#endif
